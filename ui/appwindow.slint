import { HorizontalBox, VerticalBox, ComboBox, ScrollView, Button } from "std-widgets.slint";

export component MainWindow inherits Window {
    in property <image> image-data;
    out property <int> image-size: 0;
    in-out property <float> scale: 1;
    private property <length> image-width-scaled: image-data.width * scale * 1px;
    private property <length> image-height-scaled: image-data.height * scale * 1px;
    private property <float> ratio-x-viewport;
    private property <float> ratio-y-viewport;

    title: "Slint Image Filter Integration Example";
    // preferred-width: 800px;
    // preferred-height: 600px;

    VerticalBox {
        HorizontalBox {
            Button {
                text: "Original size" + scale;
                clicked => {
                    image-size = 0;
                    root.scale = 1;
                }
            }

            Button {
                text: "Fit to window";
                clicked => {
                    image-size = 1;
                }
            }
        }

        HorizontalBox {
            padding-left: (parent.width > image-width-scaled && image-size == 1) ? (parent.width - image-width-scaled) / 2 : 0px;
            screen := TouchArea {
                Flickable {
                    viewport-width: (image-size == 1) ? image-width-scaled : self.width;
                    viewport-height: (image-size == 1) ? image-height-scaled : self.height;
                    TouchArea {
                        clicked => {
                            debug(screen.mouse-x);
                            debug(screen.mouse-y);
                            debug(self.mouse-x);
                            debug(self.mouse-y);
                            debug(parent.viewport-x);
                            debug(parent.viewport-y);
                        }
                        scroll-event(event) => {
                            image-size = 1;
                            ratio-x-viewport = self.mouse-x / parent.viewport-width;
                            ratio-y-viewport = self.mouse-y / parent.viewport-height;
                            if (event.delta-y > 0) {
                                root.scale += 0.2;
                                parent.viewport-x = screen.mouse-x - (ratio-x-viewport * parent.viewport-width);
                                parent.viewport-y = screen.mouse-y - (ratio-y-viewport * parent.viewport-height);
                            } else if (root.scale > 0.3) {
                                root.scale -= 0.2;
                                parent.viewport-x = screen.mouse-x - (ratio-x-viewport * parent.viewport-width);
                                parent.viewport-y = screen.mouse-y - (ratio-y-viewport * parent.viewport-height);
                            }
                            accept
                        }
                        Image {
                            source: image-data;
                            image-fit: (image-size == 1) ? cover : contain;
                            width: (image-size == 1) ? image-width-scaled : parent.width;
                            height: (image-size == 1) ? image-height-scaled : parent.height;
                        }
                    }
                }
            }
        }
    }
}
