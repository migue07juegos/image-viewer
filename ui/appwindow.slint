import { HorizontalBox, VerticalBox, ComboBox, ScrollView, Button, Palette, StandardButton, Switch } from "std-widgets.slint";

component ChangeObserver {
    in property <length> value;
    callback changed;

    width: 0;
    height: 0;
    visible: false;
    property <length> i-value;
    property <bool> i-updated: false;

    if i-value != value: Rectangle {
        init => {
            root.i-value = root.value;
            if (root.i-updated) {
                root.changed();
            }
            root.i-updated = true;
        }
    }
}

component ArrowButton inherits Rectangle {
    in-out property icon <=> icon.source;
    callback clicked <=> touch.clicked;
    opacity: touch.has-hover ? 100% : 0%;

    background: #000000AA;
    height: 60px;
    width: 45px;
    icon := Image {
        vertical-alignment: center;
        horizontal-alignment: center;
        image-fit: contain;
        height: 60px;
        width: 45px;
    }

    touch := TouchArea { }
}

export component MainWindow inherits Window {
    in property <image> image-data;
    out property <int> image-size: 0;
    private property <float> scale: (image-data.width / image-display.width >= image-data.height / image-display.height) ? image-display.width / image-data.width / 1px : image-display.height / image-data.height / 1px;
    private property <length> image-width-scaled: image-data.width * scale * 1px;
    private property <length> image-height-scaled: image-data.height * scale * 1px;
    private property <float> ratio-x-viewport;
    private property <float> ratio-y-viewport;
    callback rotate_clockwise <=> rotateClockwise.clicked;
    callback rotate_anti_clockwise <=> rotateAntiClockwise.clicked;
    callback copy <=> copyButton.clicked;
    callback save <=> saveButton.clicked;
    callback next_image;
    callback previous_image;

    title: "Slint Image Filter Integration Example";
    // preferred-width: 800px;
    // preferred-height: 600px;
  forward-focus: key-handler;
    key-handler := FocusScope {
        key-pressed(key) => {
            if (key.modifiers.control && key.text == "s") {
                save();
            }
            if (key.text == Key.RightArrow) {
                next_image();
            }
            if (key.text == Key.LeftArrow) {
                previous_image();
            }
            accept
        }

        VerticalBox {
            HorizontalBox {
                ChangeObserver {
                    value: parent.width;
                    changed => {
                        if (image-size == 0) {
                            root.scale = (image-data.width / screen.width >= image-data.height / screen.height) ? screen.width / image-data.width / 1px : screen.height / image-data.height / 1px;
                        }
                    }
                }

                ChangeObserver {
                    value: parent.height;
                    changed => {
                        if (image-size == 0) {
                            root.scale = (image-data.width / screen.width >= image-data.height / screen.height) ? screen.width / image-data.width / 1px : screen.height / image-data.height / 1px;
                        }
                    }
                }

                boton1 := Button {
                    // text: "Fit to window";
                    icon: @image-url("Icons/zoom-fit-best-symbolic.svg");
                    clicked => {
                        image-size = 0;
                        root.scale = (image-data.width / screen.width >= image-data.height / screen.height) ? screen.width / image-data.width / 1px : screen.height / image-data.height / 1px;
                        viewport.viewport-x = 0;
                        viewport.viewport-y = 0;
                    }
                }

                Button {
                    // text: "Original size";
                    icon: @image-url("Icons/zoom-original-symbolic.svg");
                    clicked => {
                        image-size = 1;
                        root.scale = 1;
                    }
                }

                rotateAntiClockwise := Button {
                    // text: "Rotate anti-clockwise";
                    icon: @image-url("Icons/object-rotate-left-symbolic.svg");
                }

                rotateClockwise := Button {
                    // text: "Rotate clockwise";
                    icon: @image-url("Icons/object-rotate-right-symbolic.svg");
                }

                copyButton := Button {
                    // text: "Copy image";
                    icon: @image-url("Icons/edit-copy-symbolic.svg");
                }

                saveButton := Button {
                    // text: "Save image";
                    icon: @image-url("Icons/document-save-symbolic.svg");
                }

                aliasing := Switch {
                    text: "Anti-aliasing";
                }
            }

            image-display := Rectangle {
                previous_arrow := ArrowButton {
                    icon: @image-url("Icons/go-previous-symbolic.svg");
                    x: 0;
                    y: parent.height / 2;
                    z: 0.1;
                    clicked => {
                        previous_image();
                    }
                }

                next_arrow := ArrowButton {
                    icon: @image-url("Icons/go-next-symbolic.svg");
                    x: parent.width - self.width;
                    y: parent.height / 2;
                    z: 0.1;
                    clicked => {
                        next_image();
                    }
                }

                screen := TouchArea {
                    viewport := Flickable {
                        viewport-width: image-width-scaled;
                        viewport-height: image-height-scaled;
                        TouchArea {
                            x: (screen.width > image-width-scaled) ? (screen.width - image-width-scaled) / 2 : 0;
                            y: (screen.height > image-height-scaled) ? (screen.height - image-height-scaled) / 2 : 0;
                            scroll-event(event) => {
                                ratio-x-viewport = self.mouse-x / parent.viewport-width;
                                ratio-y-viewport = self.mouse-y / parent.viewport-height;
                                if (event.delta-y > 0) {
                                    root.scale += 0.2;
                                } else if (root.scale > 0.3) {
                                    root.scale -= 0.2;
                                }
                                parent.viewport-x = screen.mouse-x - (ratio-x-viewport * parent.viewport-width) - self.x;
                                parent.viewport-y = screen.mouse-y - (ratio-y-viewport * parent.viewport-height) - self.y;
                                image-size = 1;

                                accept
                            }
                            image := Image {
                                vertical-alignment: center;
                                horizontal-alignment: center;
                                image-rendering: (aliasing.checked) ? smooth : pixelated;
                                source: image-data;
                                image-fit: cover;
                                width: image-width-scaled;
                                height: image-height-scaled;
                            }
                        }
                    }
                }
            }
        }
    }
}
