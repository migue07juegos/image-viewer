import { HorizontalBox, VerticalBox, ComboBox, ScrollView, Button } from "std-widgets.slint";

component ChangeObserver {
    in property <length> value;
    callback changed;

    width: 0;
    height: 0;
    visible: false;
    property <length> i-value;
    property <bool> i-updated: false;

    if i-value != value: Rectangle {
        init => {
            root.i-value = root.value;
            if (root.i-updated) {
                root.changed();
            }
            root.i-updated = true;
        }
    }
}

export component MainWindow inherits Window {
    in property <image> image-data;
    out property <int> image-size: 0;
    private property <float> scale: (image-data.width / self.width >= image-data.height / self.height) ? self.width / image-data.width / 1px : self.height / image-data.height / 1px;
    private property <length> image-width-scaled: image-data.width * scale * 1px;
    private property <length> image-height-scaled: image-data.height * scale * 1px;
    private property <float> ratio-x-viewport;
    private property <float> ratio-y-viewport;

    title: "Slint Image Filter Integration Example";
    // preferred-width: 800px;
    // preferred-height: 600px;
 
    VerticalBox {
        HorizontalBox {
            ChangeObserver {
                value: parent.width;
                changed => {
                    if (image-size == 0) {
                        root.scale = (image-data.width / screen.width >= image-data.height / screen.height) ? screen.width / image-data.width / 1px : screen.height / image-data.height / 1px;
                    }
                }
            }

            ChangeObserver {
                value: parent.height;
                changed => {
                    if (image-size == 0) {
                        root.scale = (image-data.width / screen.width >= image-data.height / screen.height) ? screen.width / image-data.width / 1px : screen.height / image-data.height / 1px;
                    }
                }
            }

            boton1 := Button {
                text: "Fit to window";
                clicked => {
                    image-size = 0;
                    root.scale = (image-data.width / screen.width >= image-data.height / screen.height) ? screen.width / image-data.width / 1px : screen.height / image-data.height / 1px;
                    viewport.viewport-x = 0;
                    viewport.viewport-y = 0;
                }
            }

            Button {
                text: "Original size";
                clicked => {
                    image-size = 1;
                    root.scale = 1;
                }
            }
        }

        Rectangle {
            // padding-left: (parent.width > image-width-scaled) ? (parent.width - image-width-scaled) / 2 : 0px;
            screen := TouchArea {
                viewport := Flickable {
                    viewport-width: image-width-scaled;
                    viewport-height: image-height-scaled;
                    TouchArea {
                        scroll-event(event) => {
                            ratio-x-viewport = self.mouse-x / parent.viewport-width;
                            ratio-y-viewport = self.mouse-y / parent.viewport-height;
                            if (event.delta-y > 0) {
                                root.scale += 0.2;
                            } else if (root.scale > 0.3) {
                                root.scale -= 0.2;
                            }
                            parent.viewport-x = screen.mouse-x - (ratio-x-viewport * parent.viewport-width);
                            parent.viewport-y = screen.mouse-y - (ratio-y-viewport * parent.viewport-height);
                            image-size = 1;

                            accept
                        }
                        Image {
                            vertical-alignment: top;
                            image-rendering: pixelated;
                            source: image-data;
                            image-fit: cover;
                            width: image-width-scaled;
                            height: image-height-scaled;
                        }
                    }
                }
            }
        }
    }
}
